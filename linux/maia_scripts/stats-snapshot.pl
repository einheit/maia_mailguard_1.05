#!/usr/bin/perl

# $Id: stats-snapshot.pl 1528 2011-05-31 10:09:15Z rjl $

########################################################################
# MAIA MAILGUARD LICENSE v.1.0
#
# Copyright 2004 by Robert LeBlanc <rjl@renaissoft.com>
#                   David Morton   <mortonda@dgrmm.net>
# All rights reserved.
#
# PREAMBLE
#
# This License is designed for users of Maia Mailguard
# ("the Software") who wish to support the Maia Mailguard project by
# leaving "Maia Mailguard" branding information in the HTML output
# of the pages generated by the Software, and providing links back
# to the Maia Mailguard home page.  Users who wish to remove this
# branding information should contact the copyright owner to obtain
# a Rebranding License.
#
# DEFINITION OF TERMS
#
# The "Software" refers to Maia Mailguard, including all of the
# associated PHP, Perl, and SQL scripts, documentation files, graphic
# icons and logo images.
#
# GRANT OF LICENSE
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. The end-user documentation included with the redistribution, if
#    any, must include the following acknowledgment:
#
#    "This product includes software developed by Robert LeBlanc
#    <rjl@renaissoft.com>."
#
#    Alternately, this acknowledgment may appear in the software itself,
#    if and wherever such third-party acknowledgments normally appear.
#
# 4. At least one of the following branding conventions must be used:
#
#    a. The Maia Mailguard logo appears in the page-top banner of
#       all HTML output pages in an unmodified form, and links
#       directly to the Maia Mailguard home page; or
#
#    b. The "Powered by Maia Mailguard" graphic appears in the HTML
#       output of all gateway pages that lead to this software,
#       linking directly to the Maia Mailguard home page; or
#
#    c. A separate Rebranding License is obtained from the copyright
#       owner, exempting the Licensee from 4(a) and 4(b), subject to
#       the additional conditions laid out in that license document.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
########################################################################

    use DBI;

    # prototypes
    sub fatal($);
    sub output($);
    sub get_db_type($);
    sub update_stats($$);
    sub expire_stats($);

    # name of this script
    my $script_name = "stats-snapshot";

    # read configuration file (/etc/maia/maia.conf)
    my $config_file = "/etc/maia/maia.conf";
    unless (my $rv = do $config_file) {
        fatal(sprintf("Couldn't parse %s: %s", $config_file, $@)) if $@;
        fatal(sprintf("Couldn't open %s", $config_file)) if (!defined($rv) || !$rv);
    };

    $pid_dir = "/var/run/maia" if !defined($pid_dir);

    $pid_file = "$pid_dir/.stats-snapshot.pid";
    # Check for existing lock file, remove any stale locks
    if (open(PID_FILE, "< $pid_file\0")) {
        my $pid;
        while (<PID_FILE>) { chomp; $pid = $_ if /^\d+\z/ }
        close(PID_FILE) or fatal(sprintf("Can't close file %s: %s", $pid_file, $!));
        if (!defined($pid)) {
            if ($debug) {
                output("Removing invalid lock file...");
            }
            unlink($pid_file);
        } elsif (kill 0 => $pid) {
            if (!$quiet) {
                output(sprintf("Another instance [%d] is currently running.", $pid));
            }
            exit;
        } else {
            if ($debug) {
                output(sprintf("Removing stale lock file [%d]...", $pid));
            }
            unlink($pid_file);
        }
    }

    # Write lock file, store PID
    open(PID_FILE, "> $pid_file\0") or fatal(sprintf("Can't write lock file %s", $pid_file));
    print PID_FILE "$$";
    close(PID_FILE);

    my $dbh;

    # database configuration
    if (defined($dsn) && defined($username) && defined($password)) {
        $dbh = DBI->connect($dsn, $username, $password)
            or fatal("Can't connect to the Maia database (verify \$dsn, \$username, and \$password in maia.conf)");
    } else {
        fatal("Can't connect to the Maia database (missing \$dsn, \$username, or \$password in maia.conf)");
    }

    # What time/date is it?
    my($hour, $day, $month, $year) = (localtime)[2,3,4,5];
    $month += 1;
    $year += 1900;

    output("Updating stats history table.");
    update_stats($dbh, "H");
    if ($hour == 0) { # Midnight
        update_stats($dbh, "D");
        if ($day == 1) { # First day of the month
            update_stats($dbh, "M");
            if ($month == 1) { # New Years
            	update_stats($dbh, "Y");
            }
        }
    }
    expire_stats($dbh);

    # Disconnect from the database
    $dbh->disconnect;

    unlink($pid_file);

    # We're done.
    exit;


    # Die, printing a time-stamped error message.
    sub fatal($) {
        my ($msg) = @_;

        output("FATAL ERROR: " . $msg);
        unlink($pid_file);
        exit 1;
    }


    # Write a time-stamped string to stdout for logging purposes.
    sub output($) {
        my ($msg) = @_;
        my ($year, $month, $day, $hour, $minute, $second);
        my ($second, $minute, $hour, $day, $month, $year) = (localtime)[0,1,2,3,4,5];

        printf("%04d-%02d-%02d %02d:%02d:%02d Maia: [%s] %s\n",
               $year+1900, $month+1, $day, $hour, $minute, $second, $script_name, $msg);
    }


    sub get_db_type($) {
    	my($dbh) = @_;

    	return $dbh->{Driver}->{Name};
    }


    sub update_stats($$) {
        my($dbh, $type) = @_;
        my($select, $insert, $delete, $sth, $sth2, $sth3, @row, @row2, $user_id);
        my($total_ham_items, $total_ham_size);
        my($total_spam_items, $total_spam_size);
        my($total_virus_items, $total_virus_size);
        my($total_fp_items, $total_fp_size);
        my($total_fn_items, $total_fn_size);
        my($total_banned_file_items, $total_banned_file_size);
        my($total_bad_header_items, $total_bad_header_size);
        my($total_wl_items, $total_wl_size);
        my($total_bl_items, $total_bl_size);
        my($total_oversized_items, $total_oversized_size);
        my($dbtype) = get_db_type($dbh);

        $type = $1 if $type =~ /^([YMDH])$/si; # untaint

        $select = "SELECT user_id FROM maia_stats";
        $sth = $dbh->prepare($select)
                   or fatal(sprintf("Couldn't prepare query: %s", $dbh->errstr));
        $sth->execute()
            or fatal(sprintf("Couldn't execute query: %s", $dbh->errstr));
        while (@row = $sth->fetchrow_array()) {
            $user_id = $1 if $row[0] =~ /^([0-9]+)$/si; # untaint

            $select = "SELECT total_ham_items, total_ham_size, " .
                             "total_spam_items, total_spam_size, " .
                             "total_virus_items, total_virus_size, " .
                             "total_fp_items, total_fp_size, " .
                             "total_fn_items, total_fn_size, " .
                             "total_banned_file_items, total_banned_file_size, " .
                             "total_bad_header_items, total_bad_header_size, " .
                             "total_wl_items, total_wl_size, " .
                             "total_bl_items, total_bl_size, " .
                             "total_oversized_items, total_oversized_size " .
                      "FROM maia_stats WHERE user_id = ?";

            $sth2 = $dbh->prepare($select)
                       or fatal(sprintf("Couldn't prepare query: %s", $dbh->errstr));
            $sth2->execute($user_id)
                or fatal(sprintf("Couldn't execute query: %s", $dbh->errstr));
            if (@row2 = $sth2->fetchrow_array()) {
            	$total_ham_items = $1 if $row2[0] =~ /^([0-9]+)$/si; # untaint
            	$total_ham_size = $1 if $row2[1] =~ /^([0-9]+)$/si; # untaint
            	$total_spam_items = $1 if $row2[2] =~ /^([0-9]+)$/si; # untaint
            	$total_spam_size = $1 if $row2[3] =~ /^([0-9]+)$/si; # untaint
            	$total_virus_items = $1 if $row2[4] =~ /^([0-9]+)$/si; # untaint
            	$total_virus_size = $1 if $row2[5] =~ /^([0-9]+)$/si; # untaint
            	$total_fp_items = $1 if $row2[6] =~ /^([0-9]+)$/si; # untaint
            	$total_fp_size = $1 if $row2[7] =~ /^([0-9]+)$/si; # untaint
            	$total_fn_items = $1 if $row2[8] =~ /^([0-9]+)$/si; # untaint
            	$total_fn_size = $1 if $row2[9] =~ /^([0-9]+)$/si; # untaint
            	$total_banned_file_items = $1 if $row2[10] =~ /^([0-9]+)$/si; # untaint
            	$total_banned_file_size = $1 if $row2[11] =~ /^([0-9]+)$/si; # untaint
            	$total_bad_header_items = $1 if $row2[12] =~ /^([0-9]+)$/si; # untaint
            	$total_bad_header_size = $1 if $row2[13] =~ /^([0-9]+)$/si; # untaint
            	$total_wl_items = $1 if $row2[14] =~ /^([0-9]+)$/si; # untaint
            	$total_wl_size = $1 if $row2[15] =~ /^([0-9]+)$/si; # untaint
            	$total_bl_items = $1 if $row2[16] =~ /^([0-9]+)$/si; # untaint
            	$total_bl_size = $1 if $row2[17] =~ /^([0-9]+)$/si; # untaint
            	$total_oversized_items = $1 if $row2[18] =~ /^([0-9]+)$/si; # untaint
            	$total_oversized_size = $1 if $row2[19] =~ /^([0-9]+)$/si; # untaint

                $insert = "INSERT INTO maia_stats_history (user_id, " .
                                                          "type, " .
                                                          "taken_at, " .
                                                          "total_ham_items, total_ham_size, " .
                                                          "total_spam_items, total_spam_size, " .
                                                          "total_virus_items, total_virus_size, " .
                                                          "total_fp_items, total_fp_size, " .
                                                          "total_fn_items, total_fn_size, " .
                                                          "total_banned_file_items, total_banned_file_size, " .
                                                          "total_bad_header_items, total_bad_header_size, " .
                                                          "total_wl_items, total_wl_size, " .
                                                          "total_bl_items, total_bl_size, " .
                                                          "total_oversized_items, total_oversized_size) " .
                          "VALUES (?,?,NOW(),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                $sth3 = $dbh->prepare($insert)
                            or fatal(sprintf("Couldn't prepare query: %s", $dbh->errstr));
                $sth3->execute($user_id, $type,
                               $total_ham_items, $total_ham_size,
                               $total_spam_items, $total_spam_size,
                               $total_virus_items, $total_virus_size,
                               $total_fp_items, $total_fp_size,
                               $total_fn_items, $total_fn_size,
                               $total_banned_file_items, $total_banned_file_size,
                               $total_bad_header_items, $total_bad_header_size,
                               $total_wl_items, $total_wl_size,
                               $total_bl_items, $total_bl_size,
                               $total_oversized_items, $total_oversized_size)
                    or fatal(sprintf("Couldn't execute query: %s", $dbh->errstr));
            }
            $sth2->finish;
        }
        $sth->finish;
    }


    # Expire outdated stats summaries
    sub expire_stats($) {
        my($dbh) = @_;
        my($delete, $sth);
        my($dbtype) = get_db_type($dbh);

        $delete = "DELETE FROM maia_stats_history WHERE ";

        if ($dbtype =~ /^mysql$/si) { # MySQL

            # Maintain a year's worth of monthly summaries (12 records)
            $delete .= "(type = 'M' AND taken_at <= DATE_SUB(NOW(), INTERVAL 1 YEAR)) ";

            # Maintain a month's worth of daily summaries (31 records)
            $delete .= "OR (type = 'D' AND taken_at <= DATE_SUB(NOW(), INTERVAL 31 DAY)) ";

            # Maintain a day's worth of hourly summaries (24 records)
            $delete .= "OR (type = 'H' AND taken_at <= DATE_SUB(NOW(), INTERVAL 1 DAY))";

        } elsif ($dbtype =~ /^pg$/si) { # PostgreSQL

            # Maintain a year's worth of monthly summaries (12 records)
            $delete .= "(type = 'M' AND taken_at <= NOW() - INTERVAL '1 YEAR') ";

            # Maintain a month's worth of daily summaries (31 records)
            $delete .= "OR (type = 'D' AND taken_at <= NOW() - INTERVAL '31 DAY') ";

            # Maintain a day's worth of hourly summaries (24 records)
            $delete .= "OR (type = 'H' AND taken_at <= NOW() - INTERVAL '1 DAY')";

        }
        $sth = $dbh->prepare($delete)
                   or fatal(sprintf("Couldn't prepare query: %s", $dbh->errstr));
        $sth->execute()
            or fatal(sprintf("Couldn't execute query: %s", $dbh->errstr));

    }
