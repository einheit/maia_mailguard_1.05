<?php
    /*
     * $Id: encrypt.php 897 2005-12-23 03:28:31Z dmorton $
     *
     * MAIA MAILGUARD LICENSE v.1.0
     *
     * Copyright 2004 by Robert LeBlanc <rjl@renaissoft.com>
     *                   David Morton   <mortonda@dgrmm.net>
     * All rights reserved.
     *
     * PREAMBLE
     *
     * This License is designed for users of Maia Mailguard
     * ("the Software") who wish to support the Maia Mailguard project by
     * leaving "Maia Mailguard" branding information in the HTML output
     * of the pages generated by the Software, and providing links back
     * to the Maia Mailguard home page.  Users who wish to remove this
     * branding information should contact the copyright owner to obtain
     * a Rebranding License.
     *
     * DEFINITION OF TERMS
     *
     * The "Software" refers to Maia Mailguard, including all of the
     * associated PHP, Perl, and SQL scripts, documentation files, graphic
     * icons and logo images.
     *
     * GRANT OF LICENSE
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions
     * are met:
     *
     * 1. Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright
     *    notice, this list of conditions and the following disclaimer in the
     *    documentation and/or other materials provided with the distribution.
     *
     * 3. The end-user documentation included with the redistribution, if
     *    any, must include the following acknowledgment:
     *
     *    "This product includes software developed by Robert LeBlanc
     *    <rjl@renaissoft.com>."
     *
     *    Alternately, this acknowledgment may appear in the software itself,
     *    if and wherever such third-party acknowledgments normally appear.
     *
     * 4. At least one of the following branding conventions must be used:
     *
     *    a. The Maia Mailguard logo appears in the page-top banner of
     *       all HTML output pages in an unmodified form, and links
     *       directly to the Maia Mailguard home page; or
     *
     *    b. The "Powered by Maia Mailguard" graphic appears in the HTML
     *       output of all gateway pages that lead to this software,
     *       linking directly to the Maia Mailguard home page; or
     *
     *    c. A separate Rebranding License is obtained from the copyright
     *       owner, exempting the Licensee from 4(a) and 4(b), subject to
     *       the additional conditions laid out in that license document.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
     * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
     * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
     * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
     * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
     * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
     * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
     * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     */

    $algorithm = MCRYPT_BLOWFISH;    // Blowfish
    $block_mode = MCRYPT_MODE_CBC;   // Chained-Block Checksum


    /*
     * get_encryption_key(): Reads the encryption key from a file
     *                       specified in maia_config.key_file.
     */
function get_encryption_key()
{
    $key_file = get_config_value("key_file");
    $fh = fopen($key_file, "r") or die("Can't open key file " . $key_file);
    $key = fread($fh, filesize($key_file));
    fclose($fh);

    return $key;
}


    /*
     * text_is_encrypted(): Returns true if the string has an encryption
     *                      header, false otherwise.
     */
function text_is_encrypted($text)
{
    return (preg_match("/^RandomIV/", $text));
}


    /*
     * get_initialization_vector(): Gets the initialization vector from the
     *                              header of the encrypted string.
     */
function get_initialization_vector($ciphertext)
{
    global $algorithm;
    global $block_mode;

    $iv_size = mcrypt_get_iv_size($algorithm, $block_mode);
    if (preg_match("/^RandomIV(.{" . $iv_size . "})/", $ciphertext, $match)) {
        $iv = $match[1];
    } else {
        $iv = substr($ciphertext, strlen("RandomIV"), $iv_size);
    }

    return array($iv, $iv_size);
}


    /*
     * decrypt_text(): Decrypts an encrypted string, using the
     *                 supplied key.
     */
function decrypt_text($key, $ciphertext)
{
    global $algorithm;
    global $block_mode;

    if (text_is_encrypted($ciphertext)) {

        list($iv, $iv_size) = get_initialization_vector($ciphertext);
        $ciphertext = substr($ciphertext, strlen("RandomIV") + $iv_size);
        $plaintext = mcrypt_decrypt($algorithm, $key, $ciphertext, $block_mode, $iv);
        if (($len = strpos($plaintext, chr(0))) !== false) {
            $plaintext = substr($plaintext, 0, $len);
        }
        return $plaintext;

    } else {

        return $ciphertext;

    }
}

?>
